{"version":3,"file":"buried.es.js","sources":["../src/store.ts","../src/timer.ts","../src/index.ts"],"sourcesContent":["export interface BuriedData<TData = any> {\n  /**\n   * buried version\n   */\n  version?: string;\n  /**\n   * buried point data array\n   */\n  data: TData[];\n  lastReportTime: number;\n  lastUpdateTime?: number;\n}\n\nexport interface StoreOptions<TData> {\n  /**\n   * set data to storage, default using localStorage\n   */\n  setData?: (data: BuriedData) => void;\n  /**\n   * get data from storage, default using localStorage\n   */\n  getData?: () => BuriedData;\n  /**\n   * report buried point data, default using fetch\n   */\n  report?: (url: string, data: TData[]) => Promise<any>;\n  /**\n   * report url\n   */\n  url: string;\n}\n\nconst STORE_NAME = '__BURIED_DATA__';\n\nexport class Store<TData> {\n\n  private options: StoreOptions<TData>;\n  data: BuriedData<TData> = this.getInitData();\n\n  constructor(options: StoreOptions<TData>) {\n    this.options = options;\n    const localData = this.getData();\n    if (localData) {\n      this.data = localData;\n    }\n  }\n\n  private setData (data: BuriedData) {\n    if (this.options.setData) {\n      this.options.setData(data);\n      return;\n    }\n    if (window && window.localStorage) {\n      window.localStorage.setItem(STORE_NAME, JSON.stringify(data));\n    } else {\n      throw new Error('[Buried] need to provide storage methods for current environment!');\n    }\n  }\n\n  private getData (): BuriedData<TData> | null {\n    if (this.options.getData) {\n      return this.options.getData();\n    }\n    if (window && window.localStorage) {\n      const str = window.localStorage.getItem(STORE_NAME);\n      if (str) {\n        try {\n          const data: BuriedData = JSON.parse(str);\n          return data;\n        } catch (e) {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error('[Buried] need to provide storage methods for current environment!');\n    }\n  }\n\n  private getInitData (): BuriedData<TData> {\n    return {\n      version: '1.0.0',\n      data: [],\n      lastReportTime: new Date().getTime(),\n      lastUpdateTime: new Date().getTime()\n    };\n  }\n\n  reset () {\n    this.data = this.getInitData();\n    this.setData(this.data);\n  }\n\n  put (data: TData | TData[]) {\n    if (!data) {\n      return;\n    }\n    if (!this.data.data) {\n      this.data.data = [];\n    }\n    if (Array.isArray(data)) {\n      this.data.data.push(...data);\n    } else {\n      this.data.data.push(data);\n    }\n    this.data.lastUpdateTime = new Date().getTime();\n    this.setData(this.data);\n  }\n\n  async report<TReturn> (): Promise<TReturn> {\n    if (this.options.report) {\n      const res: TReturn = await this.options.report(this.options.url, this.data.data);\n      this.reset();\n      return res;\n    }\n    return Promise.resolve({} as TReturn);\n  }\n\n}\n","export class Timer {\n\n  private period: number = 1000 * 60 * 2;\n  private timer: any;\n  private subscribers: (() => void)[] = [];\n\n  constructor(period?: number) {\n    this.setPeriod(period);\n    this.start();\n  }\n\n  private emit () {\n    for (const fn of this.subscribers) {\n      if (fn && typeof fn === 'function') {\n        fn();\n      }\n    }\n  }\n\n  start () {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    this.timer = setInterval(() => {\n      this.emit();\n    }, this.period);\n  }\n\n  stop () {\n    clearInterval(this.timer);\n  }\n\n  on (fn: () => void) {\n    this.subscribers.push(fn);\n  }\n\n  setPeriod (period?: number) {\n    if (period) {\n      this.period = period;\n    }\n  }\n\n  getPeriod (): number {\n    return this.period;\n  }\n}\n","import { Store, BuriedData, StoreOptions } from './store';\nimport { Timer } from './timer';\n\nexport interface BuriedOptions<TData> extends StoreOptions<TData> {\n  /**\n   * report period (ms), default 2 minutes\n   */\n  period?: number;\n}\n\nexport default class Buried<TData> {\n  private options: BuriedOptions<TData>;\n  private store: Store<TData>;\n  private timer: Timer;\n  private listeners: ((data: TData[]) => void)[] = [];\n\n  constructor(options: BuriedOptions<TData>) {\n    this.options = options;\n    this.store = new Store<TData>({\n      url: options.url,\n      getData: options.getData,\n      setData: options.setData,\n      report: options.report\n    });\n    this.timer = new Timer(options.period);\n    this.timer.on(() => {\n      const data: BuriedData<TData> = this.store.data;\n      for (const fn of this.listeners) {\n        if (fn && typeof fn === 'function') {\n          fn(data.data);\n        }\n      }\n      this.report();\n    });\n  }\n\n  /**\n   * put data to store\n   * @param data TData | TData[]\n   */\n  put (data: TData | TData[]) {\n    this.store.put(data);\n  }\n\n  /**\n   * report data manually\n   */\n  report<TReturn> (): Promise<TReturn> {\n    return this.store.report<TReturn>();\n  }\n\n  /**\n   * reset data\n   */\n  reset () {\n    this.store.reset();\n  }\n\n  /**\n   * stop auto report\n   */\n  stop () {\n    this.timer.stop();\n  }\n\n  /**\n   * start auto report\n   */\n  start () {\n    this.timer.start();\n  }\n\n  setPeriod (period: number) {\n    this.timer.stop();\n    this.options.period = period;\n    this.timer.setPeriod(period);\n    this.timer.start();\n  }\n\n  /**\n   * invoke after auto reported\n   * @param fn\n   */\n  onReport (fn: (data: TData[]) => void) {\n    this.listeners.push(fn);\n  }\n}\n"],"names":[],"mappings":"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"}